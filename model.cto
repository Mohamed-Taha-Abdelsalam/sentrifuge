/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace com.sentrifuge

/**
 * The types of Minerals that could be moved
 */
enum MineralType {
  o Tantalum
  o Tungsten
  o Tin
  o Cobalt
  o Gold
}

/**
 * The movement status for Minerals
 */
enum MovementStatus {
  o IN_FIELD
  o IN_TRANSIT
}


/**
 * A co_op participant
 */
abstract participant User identified by SentrifugeAuthID {
  o String SentrifugeAuthID
  o String firstName
  o String lastName
}

/**
 * A co_op participant
 */
participant co_op extends User {
     o String JobRole
    o String organization
    o String location
    o String address
    o String province
    o String country
    o Boolean conflictStatus
    o Boolean LossStatus
    o Integer transactions
    --> Business  Business  optional
}

/**
 * A Negotiant participant
 */
participant Negotiant extends User {
o String JobRole
    o String organization
    o String location
    o String address
    o String province
    o String country
    o Boolean conflictStatus
    o Boolean LossStatus
    o Integer transactions
    o Double [] money
}


/**
 * A Comptoir participant
 */

participant Comptoir extends User {
  o String JobRole
    o String organization
    o String location
    o String address
    o String province
    o String country
    o Boolean conflictStatus
    o Boolean LossStatus
    o Integer transactions
    o Double [] money
}


/**
 * A Field asset. A Field Where the minerals came from
 */
asset Field identified by FieldID {
  o String FieldID
  o String fieldname
  o String location
  --> Business  Business 
}

/**
 * Mineral asset, which is related to a Field
 */
asset Mineral identified by BagID {
    o String BagID
    o MineralType Ores
    o Boolean ConflictStatus
    o MovementStatus movementStatus
    --> Field location optional
    --> co_op owner
}

/**
 * A Business  asset which is owned by a co_op, is related to a list of fields
 * and has a list of incoming Minerals.
 */
asset Business  identified by MineralFieldID {
     o String MineralFieldID
     o String address
     o String country
     o String postcode
     o String Pronvince
     o String District 
     o Boolean ConflictStatus

     --> co_op owner
     --> Mineral[] incomingMinerals optional
}

/**
 * An abstract transaction type for Mineral movements
 */
abstract transaction MineralMovement {
  o String[] logs optional
    --> Mineral Ores
    --> Business  from
    --> Business  to
}

/**
 * A transaction type for an Mineral leaving a farm
 */
transaction MineralMovementDeparture extends MineralMovement {
  --> Field fromField
}

/**
 * A transaction type for an Mineral arriving at a field
 */
transaction MineralMovementArrival extends MineralMovement {
  --> Field arrivalField
}

transaction SetupDemo  {
}
